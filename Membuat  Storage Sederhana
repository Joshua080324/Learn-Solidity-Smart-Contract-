// SPDX-License-Identifier: MIT
pragma solidity ^0.8.18;
 // Basic Types: boolean, uint, int, adress, bytes
 // bool: nilai true atau false. // uint: angka bulat positif (uint256, uint8, dll).
// int: angka bulat bisa negatif (int256, int8, dll).
// address: alamat wallet Ethereum (20 byte).
// struct digunakan untuk mengelompokkan beberapa data jadi satu supaya lebih rapi dan mudah diatur.Biasanya data orang
//Function adalah bagian kode yang melakukan tugas tertentu saat dipanggil.
//calldata: data masuk fungsi yang cuma bisa dibaca dan nggak bisa diubah.
//memory: penyimpanan sementara selama fungsi jalan, dihapus setelah selesai.
//storage: penyimpanan permanen di kontrak, tetap ada di blockchain.
//tring memory: teks disalin ke memori sementara saat fungsi berjalan (variabel lokal).
//string (state variable): teks disimpan permanen di storage kontrak di blockchain
contract SimpleStorage {
  
    uint256 myfavouriteNumber; // 0 , favouriteNumber gets initialized to 0 if no value is good
    uint256[] ListofFavoriteNumbers;
    //  0.  1. 2.
    // [0, 78, 90]
    
    struct Person{
       uint256 favouriteNumber;
       string name; 
    }

    //Person[] public ListOfPeople; artinya membuat daftar (array) orang dari struct Person yang bisa dilihat semua orang dari luar kontrak.
    // Static Array artinya ada batasan ditanda Person[2] maka hanya ada 2 didaftar.
    //Dynamic array artinya tidak ada batasan didalam daftar
    Person[] public ListOfPeople; 

    Person public pat = Person({favouriteNumber: 7, name:"Pat"});
    Person public Joshua = Person({favouriteNumber:5, name:"Joshua"});
    //`pat` menyimpan nama "Pat" dan angka 7, 
    //`Joshua` menyimpan nama "Joshua" dan angka 5, keduanya bisa dilihat dari luar kontrak untuk menyimpan data orang.


    function store(uint256 _favouriteNumber) public {
        myfavouriteNumber = _favouriteNumber; 
    }
    

   //view,pure,no gass
   function retrieve() public view returns(uint256) {
      return myfavouriteNumber; // Mengembalikan nilai favouriteNumber yang terakhir disimpan, untuk dibaca dari luar tanpa gas
   }
   //calldata  , memory storage 
   function addPerson(string calldata _name , uint256 _favouriteNumber) public {
    _name = "cat";
    ListOfPeople.push(Person(_favouriteNumber, _name));
    //ListOfPeople.push(...) digunakan untuk menambahkan elemen baru (di sini: Person) ke akhir array penyimpanan (storage), jadi setiap kali dipanggil, daftar orang akan bertambah tanpa bikin variabel tambahan.
   }


}
